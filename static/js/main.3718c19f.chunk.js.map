{"version":3,"sources":["context/AQI/AQIContext.js","components/IndianMap.js","context/types.js","context/AQI/AQIReducer.js","context/AQI/AQIActions.js","App.js","index.js"],"names":["AQIContext","createContext","IndianMap","stateJson","width","height","useState","pollutionType","setPollutionType","legendText","setLegendText","aqiContext","useContext","projection","geoConicEqualArea","scale","rotate","center","useEffect","setGeographies","getLocalPollutionData","getProperColorName","color","slice","findColor","index","pollutionData","aqiParams","filter","data","name","length","err","console","log","message","getPollutionValue","value","aqi","loading","viewBox","className","geographies","map","d","i","geoPath","fill","stroke","strokeWidth","onClick","stateIndex","properties","st_nm","x","geoCentroid","y","maxwidth","fontFamily","fontSize","reloadAllStatesPollutionData","getAllStatesPollutionData","SET_LOADING","RESET_LOADING","SET_GEOGRAPHIES","GET_ALL_STATES_POLLUTION_DATA","RELOAD_ALL_STATES_POLLUTION_DATA","GET_LOCAL_POLLUTION_DATA","ITEM_LOADED","RESET_ITEM_LOADED","state","action","type","types","itemLoaded","payload","AQIActions","props","useReducer","AQIReducer","dispatch","resetItemLoaded","setLoading","resetLoading","a","localPollutionData","axios","get","lat","lon","config","API_KEY","res","localStorage","setItem","JSON","stringify","Date","now","getItem","parse","getSingleStatePollutionData","id","stateData","Provider","stateFeatureData","feature","objects","polygons","features","children","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3718c19f.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nconst AQIContext = createContext();\n\nexport default AQIContext;","import React, { useState, useEffect, useContext } from \"react\";\nimport { geoPath, geoConicEqualArea, geoCentroid } from \"d3-geo\";\n\nimport AQIContext from \"../context/AQI/AQIContext\";\n\nconst IndianMap = ({ stateJson, width, height }) => {\n\n  const [pollutionType, setPollutionType] = useState('');\n  const [legendText, setLegendText] = useState(\"Click on any state\");\n\n  const aqiContext = useContext(AQIContext);\n\n  const projection = geoConicEqualArea()\n    .scale(1100)\n    .rotate([-78, 0])\n    .center([12, 26]);\n\n  useEffect(() => {\n    aqiContext.setGeographies(stateJson);\n    aqiContext.getLocalPollutionData();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const handleStateClick = (stateIndex) => {\n    // console.log(stateIndex);\n    // console.log(aqiContext.geographies[stateIndex].properties.st_nm);\n    setLegendText(aqiContext.geographies[stateIndex].properties.st_nm);\n  };\n\n  const getProperColorName = (color) => {\n    if(color && color[0] === \"#\") {\n      return color.slice(0, -1);\n    }\n    return color;\n  }\n\n  const findColor = (index) => {\n    try {\n      if(aqiContext.pollutionData && (index in aqiContext.pollutionData) && (aqiContext.pollutionData[index])) {\n      \n        if(pollutionType === \"general\") {\n          const color = getProperColorName(aqiContext.pollutionData[index].color);\n          return color;\n        }\n  \n        const pollutionData = aqiContext.pollutionData[index].aqiParams.filter(data => data.name === pollutionType);\n        if(pollutionData.length > 0) {\n          const color = getProperColorName(pollutionData[0].color);\n          return color;\n        }\n      }\n      return \"#ccc\";\n    }\n    catch(err) {\n      console.log(err.message, index);\n    }\n  }\n\n  const getPollutionValue = (index) => {\n    try {\n      if(aqiContext.pollutionData[index]) {\n        if(pollutionType === \"general\") {\n          return aqiContext.pollutionData[index].value;\n        }\n        const pollutionData = aqiContext.pollutionData[index].aqiParams.filter(data => data.name === pollutionType);\n        if(pollutionData.length > 0)\n          return pollutionData[0].aqi;\n      }\n    }\n    catch(err) {\n      console.log(err.message, index);\n    }\n  }\n\n  return (\n    <>\n      {\n        aqiContext.loading ? (\n          <h2>Loading ..... Might take some time to load all the state's data...</h2>\n        ) : (\n          <>\n            <svg width={width} height={height} viewBox={`0 0 ${width} ${height}`}>\n              <g className=\"states\">\n                {\n                  aqiContext.geographies.map((d, i) => (\n                    <path\n                      key={`path-${i}`}\n                      d={geoPath().projection(projection)(d)}\n                      className=\"state\"\n                      // fill={`${geographies[i].properties.pollutionData.color}`}\n                      fill={ findColor(i) }\n                      stroke=\"red\"\n                      strokeWidth={0.5}\n                      onClick={() => handleStateClick(i)}\n                    />\n                  ))\n                }\n              </g>\n              <g className=\"level\">\n                {\n                  aqiContext.geographies.map((d, i) => (\n                    <text \n                      className=\"label\"\n                      key={`text-${i}`}\n                      x={projection(geoCentroid(d))[0] - 8}\n                      y={projection(geoCentroid(d))[1]}\n                    >\n                      {getPollutionValue(i)}\n                    </text>\n                  ))\n                }\n              </g>\n              <rect x=\"30\" y={height - height/4} width=\"200\" height=\"150\" stroke=\"black\" fill=\"transparent\" strokeWidth=\"1.5\"/>\n              <text x=\"35\"  y={height - height/4 + 30} maxwidth=\"200\" fontFamily=\"Verdana\" fontSize=\"20\" fill=\"Red\">{legendText}</text>\n            </svg>\n            <div className=\"btn-group\">\n              <button className=\"btn\" onClick={() => {\n                  aqiContext.reloadAllStatesPollutionData();\n                  setPollutionType('general');\n                  \n                }\n              }>\n                Reload Pollution Data\n              </button>\n              <button className=\"btn\" onClick={() => {\n                  aqiContext.getAllStatesPollutionData();\n                  setPollutionType('general');\n                  \n                }\n              }>\n                Get Pollution Data\n              </button>\n              <button className=\"btn\" onClick={() => {\n                  aqiContext.getAllStatesPollutionData();\n                  setPollutionType('PM2.5');\n                  \n                }\n              }>\n                Get PM2.5 Data\n              </button>\n              <button className=\"btn\" onClick={() => {\n                  aqiContext.getAllStatesPollutionData();\n                  setPollutionType('NO2');\n                  \n                }\n              }>\n                Get NO2 Data\n              </button>\n              <button className=\"btn\" onClick={() => {\n                  aqiContext.getAllStatesPollutionData();\n                  setPollutionType('SO2');\n                  \n                }\n              }>\n                Get SO2 Data\n              </button>\n              <button className=\"btn\" onClick={() => {\n                  aqiContext.getAllStatesPollutionData();\n                  setPollutionType('O3');\n                  \n                }\n              }>\n                Get O3 Data\n              </button>\n            </div>\n          </>\n        )\n      }\n    </>\n  );\n};\n\nexport default IndianMap;\n","export const SET_LOADING = \"SET_LOADING\";\nexport const RESET_LOADING = \"RESET_LOADING\";\nexport const GET_SINGLE_STATE_POLLUTION_DATA = \"GET_SINGLE_STATE_POLLUTION_DATA\";\nexport const SET_GEOGRAPHIES = \"SET_GEOGRAPHIES\";\nexport const CLEAR_GEOGRAPHIES = \"CLEAR_GEOGRAPHIES\";\nexport const GET_ALL_STATES_POLLUTION_DATA = \"GET_ALL_STATES_POLLUTION_DATA\";\nexport const RELOAD_ALL_STATES_POLLUTION_DATA = \"RELOAD_ALL_STATES_POLLUTION_DATA\";\nexport const GET_LOCAL_POLLUTION_DATA = \"GET_LOCAL_POLLUTION_DATA\";\nexport const ITEM_LOADED = \"ITEM_LOADED\";\nexport const RESET_ITEM_LOADED = \"RESET_ITEM_LOADED\";","import * as types from '../types';\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default (state, action) => {\n    switch(action.type) {\n        case types.ITEM_LOADED:\n            return {\n                ...state,\n                itemLoaded : state.itemLoaded + 1\n            }\n        case types.RESET_ITEM_LOADED:\n            return {\n                ...state,\n                itemLoaded : 0\n            }\n        case types.SET_LOADING:\n            return {\n                ...state,\n                loading: true\n            };\n        case types.RESET_LOADING:\n            return {\n                ...state,\n                loading: false\n            };\n        case types.SET_GEOGRAPHIES:\n            return {\n                ...state,\n                geographies : action.payload,\n                loading: false\n            }\n        case types.CLEAR_GEOGRAPHIES:\n            return {\n                ...state,\n                geographies: [],\n                loading : false,\n            }\n        case types.GET_SINGLE_STATE_POLLUTION_DATA:\n        case types.GET_ALL_STATES_POLLUTION_DATA:\n        case types.GET_LOCAL_POLLUTION_DATA:\n        case types.RELOAD_ALL_STATES_POLLUTION_DATA:\n            return {\n                ...state,\n                pollutionData : action.payload,\n                loading: false\n            }\n        default:\n            return state;\n    }\n}","import React, { useReducer } from 'react';\nimport axios from \"axios\";\nimport AQIContext from './AQIContext';\nimport AQIReducer from './AQIReducer';\nimport * as types from '../types';\nimport { feature } from \"topojson-client\";\n\nimport config from '../../config.json';\n\nconst AQIActions = (props) => {\n    const initialState = {\n        geographies : [],\n        loading : false,\n        pollutionData : {},\n        itemLoaded : 0\n    }\n\n    const [state, dispatch] = useReducer(AQIReducer, initialState);\n\n    const itemLoaded = () => dispatch({type : types.ITEM_LOADED});\n    const resetItemLoaded = () => dispatch({type : types.RESET_ITEM_LOADED});\n    const setLoading = () => dispatch({type : types.SET_LOADING});\n    const resetLoading = () => dispatch({type : types.RESET_LOADING});\n\n    const setGeographies = (stateJson) => {\n        setLoading();\n        const stateFeatureData = feature(stateJson, stateJson.objects.polygons).features;\n        dispatch({\n            type : types.SET_GEOGRAPHIES,\n            payload : stateFeatureData\n        })\n    }\n\n    const reloadAllStatesPollutionData = async () => {\n        try {\n            setLoading();\n            let localPollutionData =  {};\n            resetItemLoaded();\n            for(let i=0; i<state.geographies.length; i++) {\n                try {\n                    const res = await axios.get(`/aqi?lat=${state.geographies[i].properties.lat}&lon=${state.geographies[i].properties.lon}&APPID=${config.API_KEY}`);\n                    localPollutionData[i] = res.data.data;\n                    itemLoaded();\n                }\n                catch(err) {\n                    console.log(err.message);\n                }\n            }\n            localStorage.setItem(\"pollutionData\", JSON.stringify(localPollutionData));\n            dispatch({\n                type : types.GET_ALL_STATES_POLLUTION_DATA,\n                payload : localPollutionData,\n            })\n            localStorage.setItem(\"lastFetchTime\", Date.now());\n        }\n        catch(err) {\n            console.log(err.message);\n        }\n    }\n\n    const getAllStatesPollutionData = async () => {\n        try {\n            setLoading();\n            const time = localStorage.getItem(\"lastFetchTime\");\n            if(time + (1 * 60 * 60 * 1000) > Date.now()) {\n                resetLoading();\n                return;\n            }\n            let localPollutionData = JSON.parse(localStorage.getItem(\"pollutionData\"));\n            if(localPollutionData) {\n                getLocalPollutionData();\n                return;\n            }\n            localPollutionData =  {};\n            resetItemLoaded();\n            for(let i=0; i<state.geographies.length; i++) {\n                try {\n                    const res = await axios.get(`/aqi?lat=${state.geographies[i].properties.lat}&lon=${state.geographies[i].properties.lon}&APPID=${config.API_KEY}`);\n                    localPollutionData[i] = res.data.data;\n                    itemLoaded();\n                }\n                catch(err) {\n                    console.log(err.message);\n                }\n            }\n            localStorage.setItem(\"pollutionData\", JSON.stringify(localPollutionData));\n            dispatch({\n                type : types.GET_ALL_STATES_POLLUTION_DATA,\n                payload : localPollutionData,\n            });\n            localStorage.setItem(\"lastFetchTime\", Date.now());\n        }\n        catch(err) {\n            console.log(err.message);\n        }\n    }\n\n    const getSingleStatePollutionData = async (id) => {\n        const stateData = state.geographies[id];\n        if(!stateData)\n            return;\n        setLoading();\n        try {\n            let localPollutionData = JSON.parse(localStorage.getItem(\"pollutionData\"));\n            if(localPollutionData && (id in localPollutionData)) {\n                resetLoading();\n                return;\n            }\n\n            const res = await axios.get(`/aqi?lat=${stateData.properties.lat}&lon=${stateData.properties.lon}&APPID=${config.API_KEY}`);\n\n            localPollutionData = {\n                ...state.pollutionData,\n                [id] : res.data.data\n            };\n            localStorage.setItem(\"pollutionData\", JSON.stringify(localPollutionData));\n            dispatch({\n                type : types.RELOAD_ALL_STATES_POLLUTION_DATA,\n                payload : localPollutionData,\n            })\n        }\n        catch(err) {\n            console.log(err.message);\n        }\n    }\n\n    const getLocalPollutionData = () => {\n        let localPollutionData = JSON.parse(localStorage.getItem(\"pollutionData\"));\n        if(localPollutionData) {\n            dispatch({\n                type : types.GET_LOCAL_POLLUTION_DATA,\n                payload: localPollutionData\n            })\n        }\n    }\n\n    return (\n        <AQIContext.Provider\n            value={{\n                geographies : state.geographies,\n                loading: state.loading,\n                pollutionData : state.pollutionData,\n                setGeographies,\n                getSingleStatePollutionData,\n                getLocalPollutionData,\n                getAllStatesPollutionData,\n                itemLoaded,\n                reloadAllStatesPollutionData\n            }}\n        >\n            {props.children}\n        </AQIContext.Provider>\n    )\n}\n\nexport default AQIActions;","import './App.css';\nimport stateJson from './states.json';\nimport IndianMap from './components/IndianMap';\n\n//Import Context into App\nimport AQIActions from './context/AQI/AQIActions';\n\nfunction App() {\n  return (\n    <AQIActions>\n      <div className=\"App\">\n        <h1>Air Pollution Map</h1>\n        <IndianMap width={800} height={750} stateJson={stateJson} />\n      </div>\n    </AQIActions>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}